Give the order of growth (as a function of N ) of the running times of each of the following code fragments:

Note: use the following Notations for writing Answers: N, 1, log(N), N^2, N*log(N), 2^N, N^3, log(N)





Code-1:     int count = 0;

            for(int i = 0; i < N; i++){

                count++;

            }

 Code-2:     int sum = 0;

            if(sum == 0){

                sum++;

		}



Code-3:    for(int i = N; i > 0; i < N/2){

            int sum = 0;

	}

Code-4:      for(int i = 0; i < N; i++){

             for(int j = 0; j < N; j++){

              System.out.println(“Hello”);

                }

            }

        


Code-5:     for(int i = 0; i < N; i++){

             for(int j = 0; j < N; j = j * 2){

              System.out.println(“Hello”);

                }

            }

          


 Code-6:     public int fibonacci(int number) {

		 if (number <= 1) {

                       return number;

                 } else {

                           return fibonacci(number - 1) + fibonacci(number - 2);

                 }

		}
Answers:
code 1:N
code 2:1
code 3:log(N)
code 4:N^2
code 5:N*log(N)
code 6:1



